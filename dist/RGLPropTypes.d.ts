import PropTypes from "prop-types";
import React from "react";
import type { ReactNode } from "react";
import type { EventCallback, CompactType, Layout, LayoutItem } from "./RGLExtraTypes";
export declare type ReactRef<T extends HTMLElement> = {
    current: T | null;
};
export declare type ResizeHandleAxis = "s" | "w" | "e" | "n" | "sw" | "nw" | "se" | "ne";
export declare type ResizeHandle = ReactNode | ((resizeHandleAxis: ResizeHandleAxis, ref: ReactRef<HTMLElement>) => ReactNode);
export declare const resizeHandleAxesType: PropTypes.Requireable<(ResizeHandleAxis | null | undefined)[]>;
export declare const resizeHandleType: PropTypes.Requireable<string | number | boolean | PropTypes.ReactElementLike | PropTypes.ReactNodeArray | ((...args: any[]) => any)>;
export declare type RGLGridProps = {
    className: string;
    style: Object;
    width: number;
    autoSize: boolean;
    cols: number;
    draggableCancel: string;
    draggableHandle: string;
    verticalCompact: boolean;
    compactType: CompactType;
    layout: Layout;
    margin: [number, number];
    containerPadding?: [number, number];
    rowHeight: number;
    maxRows: number;
    isBounded: boolean;
    isDraggable: boolean;
    isResizable: boolean;
    isDroppable: boolean;
    preventCollision: boolean;
    useCSSTransforms: boolean;
    transformScale: number;
    droppingItem: Pick<LayoutItem, 'i' | 'w' | 'h'> & Partial<Omit<LayoutItem, 'i' | 'w' | 'h'>>;
    resizeHandles: ResizeHandleAxis[];
    resizeHandle?: ResizeHandle;
    allowOverlap: boolean;
    onLayoutChange: (layout: Layout) => void;
    onDrag: EventCallback;
    onDragStart: EventCallback;
    onDragStop: EventCallback;
    onResize: EventCallback;
    onResizeStart: EventCallback;
    onResizeStop: EventCallback;
    onDropDragOver?: (e: React.DragEvent) => (Partial<LayoutItem> | false);
    onDrop: (layout: Layout, item: LayoutItem | undefined, e: React.DragEvent) => void;
    children: React.ReactElement[];
    innerRef?: React.RefObject<HTMLDivElement>;
};
export declare type DefaultProps = Omit<RGLGridProps, 'children' | 'width'>;
declare const RGLPropTypes: {
    className: PropTypes.Requireable<string>;
    style: PropTypes.Requireable<object>;
    width: PropTypes.Requireable<number>;
    autoSize: PropTypes.Requireable<boolean>;
    cols: PropTypes.Requireable<number>;
    draggableCancel: PropTypes.Requireable<string>;
    draggableHandle: PropTypes.Requireable<string>;
    verticalCompact: (props: RGLGridProps) => void;
    compactType: PropTypes.Requireable<"horizontal" | "vertical">;
    layout: (props: RGLGridProps) => void;
    margin: PropTypes.Requireable<(number | null | undefined)[]>;
    containerPadding: PropTypes.Requireable<(number | null | undefined)[]>;
    rowHeight: PropTypes.Requireable<number>;
    maxRows: PropTypes.Requireable<number>;
    isBounded: PropTypes.Requireable<boolean>;
    isDraggable: PropTypes.Requireable<boolean>;
    isResizable: PropTypes.Requireable<boolean>;
    allowOverlap: PropTypes.Requireable<boolean>;
    preventCollision: PropTypes.Requireable<boolean>;
    useCSSTransforms: PropTypes.Requireable<boolean>;
    transformScale: PropTypes.Requireable<number>;
    isDroppable: PropTypes.Requireable<boolean>;
    resizeHandles: PropTypes.Requireable<(ResizeHandleAxis | null | undefined)[]>;
    resizeHandle: PropTypes.Requireable<string | number | boolean | PropTypes.ReactElementLike | PropTypes.ReactNodeArray | ((...args: any[]) => any)>;
    onLayoutChange: PropTypes.Requireable<(...args: any[]) => any>;
    onDragStart: PropTypes.Requireable<(...args: any[]) => any>;
    onDrag: PropTypes.Requireable<(...args: any[]) => any>;
    onDragStop: PropTypes.Requireable<(...args: any[]) => any>;
    onResizeStart: PropTypes.Requireable<(...args: any[]) => any>;
    onResize: PropTypes.Requireable<(...args: any[]) => any>;
    onResizeStop: PropTypes.Requireable<(...args: any[]) => any>;
    onDrop: PropTypes.Requireable<(...args: any[]) => any>;
    droppingItem: PropTypes.Requireable<PropTypes.InferProps<{
        i: PropTypes.Validator<string>;
        w: PropTypes.Validator<number>;
        h: PropTypes.Validator<number>;
    }>>;
    children: (props: any, propName: any) => void;
    innerRef: PropTypes.Requireable<any>;
};
export default RGLPropTypes;
